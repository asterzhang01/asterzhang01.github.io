[{"title":"使用智能指针管理C++对象生命周期","path":"/2024/10/12/使用智能指针管理对象生命周期/","content":"在C++多线程环境下，对象的生命周期管理一直是工程实践中的一大挑战。一旦处理不当，极易引发内存泄漏或程序崩溃，给项目稳定性带来巨大隐患。 建议使用C++智能指针管理对象生命周期，避免直接使用裸指针。智能指针能够自动处理内存管理，提高了代码的安全性和可靠性，同时也减少了手动管理内存的负担，提升了程序的健壮性。 典型场景一个对象需要委派给工作线程（worker thread）来异步执行某项任务。在此期间，关键在于确保该对象在其生命周期内保持有效，避免在工作线程还在访问它的过程中已经析构。因为这将触发未定义行为，导致程序崩溃。 在设计异步处理逻辑时，一个常见且高效的实践是将该对象的weak_ptr作为参数传递给异步任务的闭包。在工作线程实际执行任务前，通过weak_ptr调用lock函数，可以安全地检查并尝试升级为shared_ptr，确保对象依然存活，有效避免了因为对象提前析构而导致的访问悬挂指针问题。 一、继承enable_shared_from_this通过继承自enable_shared_from_this，我们的类能够在成员函数内部使用shared_from_this()方法，进而获得指向当前对象的共享指针。 12345678class Myclass : public std::enable_shared_from_this&lt;MyClass&gt; &#123;public:\tMyClass() = default;\tvoid process(); private:\tvoid process_w();&#125;; 123456789101112131415void MyClass::process () &#123;\t// get worker thread from thread pool\tauto workerThread = ThreadPool::Instance()-&gt;Get();\tstd::weak_ptr&lt;MyClass&gt; weakThis = shared_from_this();\tworkerThread-&gt;post([weakThis]&#123; // lock the weak pointer to check if &#x27;this&#x27; still exists auto sharedThis = weakThis.lock(); if (!sharedThis) return; sharedThis-&gt;process_w();\t&#125;);&#125;void MyClass::process_w() &#123;\t// process in worker thread...&#125; 二、构造工厂方法如果不想引入继承，我们可以选择设计一个工厂方法Create来实例化对象，此方法在生成对象实体的同时为成员变量mWeakThis赋值。为了进一步封装和确保安全，我们将MyClass的构造函数设为私有。 12345678910class Myclass : public std::enable_shared_from_this&lt;MyClass&gt; &#123;public:\tstatic std::shared_ptr&lt;MyClass&gt; Create();\tvoid process(); private: MyClass() = default;\tvoid process_w(); std::weak_ptr&lt;MyClass&gt; mWeakThis;&#125;; 1234567891011121314151617181920std::shared_ptr&lt;MyClass&gt; MyClass::Create() &#123;\tauto instance = std::shared_ptr&lt;MyClass&gt;(new MyClass());\tinstance-&gt;mWeakThis = instance;\treturn instance;&#125;void MyClass::process () &#123;\t// get worker thread from thread pool\tauto workerThread = ThreadPool::Instance()-&gt;Get();\tworkerThread-&gt;post([mWeakThis] &#123; // lock the weak pointer to check if &#x27;this&#x27; still exists auto sharedThis = mWeakThis.lock(); if (!sharedThis) return; sharedThis-&gt;process_w();\t&#125;);&#125;void MyClass::process_w() &#123;\t// process in worker thread...&#125;","tags":["c++"],"categories":["tech"]},{"title":"Hello, World!","path":"/2023/05/28/Hello, World!/","content":"Welcome to my Blog."},{"title":"关于","path":"/about/index.html","content":"程序员"},{"title":"404 Not Found：该页无法显示","path":"//404.html","content":""}]